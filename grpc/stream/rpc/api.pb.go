// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	HelloReq
	HelloResp
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HelloReq struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type HelloResp struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *HelloResp) Reset()                    { *m = HelloResp{} }
func (m *HelloResp) String() string            { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()               {}
func (*HelloResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "rpc.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "rpc.HelloResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	SayHello1(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (ApiService_SayHello1Client, error)
	SayHello2(ctx context.Context, opts ...grpc.CallOption) (ApiService_SayHello2Client, error)
	SayHello3(ctx context.Context, opts ...grpc.CallOption) (ApiService_SayHello3Client, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) SayHello1(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (ApiService_SayHello1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[0], c.cc, "/rpc.ApiService/SayHello1", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSayHello1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_SayHello1Client interface {
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type apiServiceSayHello1Client struct {
	grpc.ClientStream
}

func (x *apiServiceSayHello1Client) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) SayHello2(ctx context.Context, opts ...grpc.CallOption) (ApiService_SayHello2Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[1], c.cc, "/rpc.ApiService/SayHello2", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSayHello2Client{stream}
	return x, nil
}

type ApiService_SayHello2Client interface {
	Send(*HelloReq) error
	CloseAndRecv() (*HelloResp, error)
	grpc.ClientStream
}

type apiServiceSayHello2Client struct {
	grpc.ClientStream
}

func (x *apiServiceSayHello2Client) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiServiceSayHello2Client) CloseAndRecv() (*HelloResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) SayHello3(ctx context.Context, opts ...grpc.CallOption) (ApiService_SayHello3Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_ApiService_serviceDesc.Streams[2], c.cc, "/rpc.ApiService/SayHello3", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceSayHello3Client{stream}
	return x, nil
}

type ApiService_SayHello3Client interface {
	Send(*HelloReq) error
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type apiServiceSayHello3Client struct {
	grpc.ClientStream
}

func (x *apiServiceSayHello3Client) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiServiceSayHello3Client) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	SayHello1(*HelloReq, ApiService_SayHello1Server) error
	SayHello2(ApiService_SayHello2Server) error
	SayHello3(ApiService_SayHello3Server) error
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_SayHello1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).SayHello1(m, &apiServiceSayHello1Server{stream})
}

type ApiService_SayHello1Server interface {
	Send(*HelloResp) error
	grpc.ServerStream
}

type apiServiceSayHello1Server struct {
	grpc.ServerStream
}

func (x *apiServiceSayHello1Server) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiService_SayHello2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServiceServer).SayHello2(&apiServiceSayHello2Server{stream})
}

type ApiService_SayHello2Server interface {
	SendAndClose(*HelloResp) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type apiServiceSayHello2Server struct {
	grpc.ServerStream
}

func (x *apiServiceSayHello2Server) SendAndClose(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiServiceSayHello2Server) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApiService_SayHello3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServiceServer).SayHello3(&apiServiceSayHello3Server{stream})
}

type ApiService_SayHello3Server interface {
	Send(*HelloResp) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type apiServiceSayHello3Server struct {
	grpc.ServerStream
}

func (x *apiServiceSayHello3Server) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiServiceSayHello3Server) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello1",
			Handler:       _ApiService_SayHello1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHello2",
			Handler:       _ApiService_SayHello2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHello3",
			Handler:       _ApiService_SayHello3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x92, 0xe3, 0xe2, 0xf0, 0x48,
	0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xe4, 0xb9, 0x38, 0xa1, 0xf2, 0xc5, 0x05, 0xd8,
	0x14, 0x18, 0xcd, 0x63, 0xe4, 0xe2, 0x72, 0x2c, 0xc8, 0x0c, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0x15, 0xd2, 0xe3, 0xe2, 0x0c, 0x4e, 0xac, 0x04, 0x6b, 0x31, 0x14, 0xe2, 0xd5, 0x2b, 0x2a, 0x48,
	0xd6, 0x83, 0x99, 0x2f, 0xc5, 0x87, 0xcc, 0x2d, 0x2e, 0x50, 0x62, 0x30, 0x60, 0x44, 0x56, 0x6f,
	0x44, 0x50, 0xbd, 0x06, 0xa3, 0x90, 0x01, 0x42, 0xbd, 0x31, 0x11, 0xea, 0x0d, 0x18, 0x9d, 0xd4,
	0xb8, 0x94, 0x32, 0xf3, 0xf5, 0x52, 0x2a, 0x73, 0x52, 0xf3, 0xd2, 0x4a, 0xf5, 0xd2, 0xf3, 0x75,
	0x73, 0x32, 0x93, 0x8a, 0xf5, 0xd2, 0x41, 0x4a, 0x8b, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x41, 0xba,
	0x02, 0x18, 0x93, 0xd8, 0xc0, 0xa1, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x29, 0xfd, 0x4c,
	0xa7, 0x22, 0x01, 0x00, 0x00,
}
