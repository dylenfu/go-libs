package comet

import (
	linkerProtocol "github.com/Terry-Mao/goim/pkg/linkerprotc"
	"github.com/Terry-Mao/goim/pkg/xlog"
	"strings"
	"sync"

	"github.com/Terry-Mao/goim/api/comet/grpc"
	"github.com/Terry-Mao/goim/pkg/bufio"
)

const (
	roomPrefix = "live://"
)

// Channel used by message pusher send msg to write goroutine.
type Channel struct {
	Room         *Room
	CliProto     Ring
	signal       IMsgQueue // *grpc.Proto
	sessionID    int32
	loginReqInfo *linkerProtocol.LoginReq
	Writer       bufio.Writer
	Reader       bufio.Reader
	Next         *Channel
	Prev         *Channel

	Uid int64

	// 存在竞争后期优化
	PrevRoomID string
	NowRoomID  string

	Mid      int64
	Key      string
	IP       string
	watchOps map[int32]struct{}
	mutex    sync.RWMutex
}

// NewChannel new a channel.
func NewChannel(cli, svr int) *Channel {
	c := new(Channel)
	c.CliProto.Init(cli)
	c.signal = NewIMsgQueue(svr)
	c.watchOps = make(map[int32]struct{})
	return c
}

// Watch watch a operation.
func (c *Channel) Watch(accepts ...int32) {
	c.mutex.Lock()
	for _, op := range accepts {
		c.watchOps[op] = struct{}{}
	}
	c.mutex.Unlock()
}

// UnWatch unwatch an operation
func (c *Channel) UnWatch(accepts ...int32) {
	c.mutex.Lock()
	for _, op := range accepts {
		delete(c.watchOps, op)
	}
	c.mutex.Unlock()
}

// NeedPush verify if in watch.
func (c *Channel) NeedPush(op int32) bool {
	c.mutex.RLock()
	if _, ok := c.watchOps[op]; ok {
		c.mutex.RUnlock()
		return true
	}
	c.mutex.RUnlock()
	return false
}

// In server push message.
func (c *Channel) Push(p *grpc.Proto) (err error) {
	return c.push(p)
}

// Ready check the channel ready or close?
func (c *Channel) Ready() *grpc.Proto {
	return c.pop()
}

// Signal send signal to the channel, protocol ready.
func (c *Channel) Signal() {
	_ = c.push(grpc.ProtoReady)
}

// Close close the channel.
func (c *Channel) Close() {
	c.loginReqInfo = nil
	_ = c.push(grpc.ProtoFinish)
}

func (c *Channel) push(p *grpc.Proto) error {
	err := c.signal.In(p)
	if err != nil {
		xlog.WithFields(map[string]interface{}{
			"key":    c.Key,
			"uid":    c.Uid,
			"ip":     c.IP,
			"roomId": c.NowRoomID,
			"proto":  p,
			"err":    err.Error(),
		}).Info("msg queue mark")
	}
	return err
}

func (c *Channel) pop() *grpc.Proto {
	return c.signal.Out()
}

//获取rid,preid 没有prefix
func (c *Channel) getNowRid() string {
	return strings.ReplaceAll(c.NowRoomID, roomPrefix, "")
}

func (c *Channel) getPreRid() string {
	return strings.ReplaceAll(c.PrevRoomID, roomPrefix, "")
}
